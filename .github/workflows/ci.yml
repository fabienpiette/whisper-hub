name: Simple CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Job 1: Core Backend Tests
  backend-tests:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download && go mod verify
      
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Run tests with coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./... -skip "ThreadSafety"
        
    - name: Generate coverage report
      run: |
        go tool cover -func=coverage.out
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.out

  # Job 2: Core Frontend Tests
  frontend-tests:
    name: Frontend Critical Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run critical tests
      run: npm run test:critical

  # Job 3: Docker Build Test
  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: whisper-hub:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify Docker image exists
      run: docker images whisper-hub:test
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name whisper-hub-test -p 8080:8080 \
          -e OPENAI_API_KEY=test-key \
          whisper-hub:test
          
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        if curl -f http://localhost:8080/health; then
          echo "‚úÖ Docker health check passed"
        else
          echo "‚ùå Docker health check failed"
          docker logs whisper-hub-test
          exit 1
        fi
        
        # Cleanup
        docker stop whisper-hub-test
        docker rm whisper-hub-test

  # Job 4: Security Checks (Non-blocking)
  security-checks:
    name: Security Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run gosec security scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        $(go env GOPATH)/bin/gosec ./... || echo "‚ö†Ô∏è Security findings detected - review needed"
        
    - name: Run go vet
      run: go vet ./...

  # Job 5: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "## üöÄ CI Pipeline Results"
        echo "- Backend Tests: ${{ needs.backend-tests.result }}"
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}"  
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        
        # Check if critical jobs passed
        if [[ "${{ needs.backend-tests.result }}" == "success" ]] && \
           [[ "${{ needs.frontend-tests.result }}" == "success" ]] && \
           [[ "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "‚úÖ All critical jobs passed - PR is ready for review"
        else
          echo "‚ùå Critical jobs failed - PR should not be merged"
          exit 1
        fi